#Add in new category columns
plotCover4 <- data.frame(plotCover3, forb = forb, palmetto = palmetto)#did not add dead.woody
#########################################################
#3C: calculate site means for untransformed plot-level data.
#USED FOR DATA SCREENING ONLY - DATA NOT USED IN ANALYSIS.
#Calculate untransformed site means from plot-level data
siteCover <- summarize(X = plotCover4[,3:length(plotCover4[1,])], by = plotCover4$siteName,
colMeans, stat.name = colnames(plotCover4)[3])
colnames(siteCover)[1] <- "siteName"
#Remove site names from matrix columns and assign as row names.
#All cover >> UNTRANSFORMED
siteCover2 <- siteCover[,2:(length(siteCover[1,]))]
rownames(siteCover2) <- siteCover[,1]
#########################################################
#3d: Conduct transformation on plot-level data and then calculate site means?
#Is this necessary for cover data. This data is bounded (0-100) so a log-trans
#may not be appropriate if data is not normal.
###################################################################################################
###################################################################################################
#STEP #4: OPEN AND ADJUST ENVIRONMENTAL DATA
#########################################################
#4a: Open environmental matrix
siteEnv <- read.table(
"C:/usfs_sef_data_output/2014.03.13_EnvironmentalMatrix.csv",
header=TRUE, sep=",", na.strings="NA", dec=".", strip.white=TRUE,
stringsAsFactors = F)
#########################################################
#4b: Re-assign column 1 (site names) to  a row name.
siteEnv2 <- siteEnv[,2:(length(siteEnv[1,]))]
rownames(siteEnv2) <- siteEnv[,1]
#########################################################
#4c: Environmental data, remove data you will not analyze
siteEnv3 <- siteEnv2[,-c(12,13)]
#Column 12 is soil drainage. This data is from USDA Soil Survey and not accurate
#Column 13 is region. Only two regions, at this point I don't believe this adds
#substance to the analysis because there are no physical properties for each region
#that can confound how fire characteristics drive understory plant composition
###################################################################################################
###################################################################################################
#STEP #5: STANDARDIZE ROW ORDER OF DATA SETS (I.E. ORDER SITE NAMES (ROW NAMES) OF BIOLOGICAL DATA
#ACCORDING TO ORDER IN ENVIRONMENTAL DATA SET) AND REMOVE COLUMNS WITH NO VALUES > 0.
#Reorder biological data (biomass) so sites are in same order as environmental data
#Step not necessary for cover data... sites are already in same order as environmental data.
ro <- data.frame(siteNo = 1:length(rownames(siteEnv3)), siteName = I(rownames(siteEnv3)))
ro2 <- ro[order(ro[,2]),]
#Untranformed biomass data
siteBiomass3 <- data.frame(so = ro2[,1], siteBiomass2)
siteBiomass4 <- siteBiomass3[order(siteBiomass3$so),]
siteBiomass5 <- siteBiomass4[,!colnames(siteBiomass4) %in% c("so")]
#Log-tranformed biomass data
siteBiomassLogTrans3 <- data.frame(so = ro2[,1], siteBiomassLogTrans2)
siteBiomassLogTrans4 <- siteBiomassLogTrans3[order(siteBiomassLogTrans3$so),]
siteBiomassLogTrans5 <- siteBiomassLogTrans4[,!colnames(siteBiomassLogTrans4) %in% c("so")]
#Remove species with no occurences, this is necessary before you can use foa.plots below
biomassOrig <- drop.var(siteBiomass5, min.fo = 1)
biomassLog <- drop.var(siteBiomassLogTrans5, min.fo = 1)
coverOrig <- drop.var(siteCover2, min.fo = 1)
#Drop rare species < 40% of sites (this reflects an asymptote in the
#Cumulative Distribution of Species Relative Occurrence, below which
#Species occur at less than 30% of sites).
bo <- drop.var(biomassOrig, min.po=40)
bl <- drop.var(biomassLog, min.po=40)
#Check to see how many species were dropped for untransformed biomass data
length(biomassOrig[1,])#
length(bo[1,])#
length(biomassLog[1,])#
length(bl[1,])
#40 to 19 variables (21 drops)
str(bo)#
str(bl)#
#Convert data.frame to a matrix (needed for uv.plots)
bo2 <- data.matrix(frame = bo, rownames.force = NA)
bl2 <- data.matrix(frame = bl, rownames.force = NA)
#uv.plots displays histogram, box and whisker, cumulative distribution and normal q-q plots
#in one pane for each variable.
uv.plots(bo2)
siteEnv4 <- data.stand(siteEnv3, method = 'total', margin = 'column', plot = F)
###################################################################################################
###################################################################################################
#STEP #7: PRELIMINARY ANALYSIS
#########################################################
#7a: Determine species with the highest and second highest biomass at each site
#and then display occurrence of dominant and co-dominant species with a histogram.
#Create a histogram of primary and secondary dominance across sites by species.
#Remove non-living categories (dead woody) from the biomass data
ab2mat <- biomassOrig#send newer file name to old file name
abhmat <- ab2mat[,-39]
#List of dominant species
prim <- mapply(function(x) {colnames(abhmat)[order(abhmat[x,])][39]}, 1:length(abhmat[,1]))
seco <- mapply(function(x) {colnames(abhmat)[order(abhmat[x,])][38]}, 1:length(abhmat[,1]))
dTable <- data.frame(Sites = I(rownames(ab2mat)), Primary = I(prim), Secondary = I(seco))
udom <- unique(c(unique(dTable[,2]),unique(dTable[,3])))
udomProper<- c("Ilex glabra", "Aristida stricta", "Lyonia ferruginea", "Serenoa repens",
"Quercus spp. (fire impeders)", "Quercus minima", "Vaccinium corymbosum",
"Rhizomatour grasses")
hprim <- mapply(function(x) {length(dTable[,2][dTable[,2] == udom[x]])}, 1:length(udom))
hseco <- mapply(function(x) {length(dTable[,3][dTable[,3] == udom[x]])}, 1:length(udom))
hdom <- data.frame(Species = I(udomProper), Primary = hprim, Secondary = hseco)
h2dom <- hdom[order(hdom[,2], decreasing = T),]
par(mai = c(2.5,1.2,1,1))
barplot(t(cbind(h2dom$Primary,h2dom$Secondary)), main = "",
xaxt = "n", ylab = "Number of sites", xlab = "", axes = F, beside = T,
col = c("white", "dark grey"))
axis(2)
text(matrix(c(seq(2,nrow(h2dom)*3,3), rep(-0.25,nrow(h2dom))), nrow = nrow(h2dom),
ncol = 2, byrow = F), srt = 60, adj = 1, xpd = T, labels = paste(h2dom$Species),
cex = 0.95)
legend(20,6, c("Dominant", "Co-dominant"), fill = c("white", "dark grey"), bty = "n")
#########################################################
#7b: Arrange species on bar chart with highest to lowest average biomass, also
#display average cover
#Make a table showing mean/sd biomass and cover
bm <- apply(abhmat,2,mean)
bs <- apply(abhmat,2,sd)
cm <- apply(coverOrig,2,mean)
cs <- apply(coverOrig,2,sd)
biomass <- data.frame(Mean = round(bm,2), SD = round(bs,2))
cover <- data.frame(cMean = round(cm,1), cSD = round(cs,1), bMean = rep(0, length(cs)),
bSD = rep(0,length(cs)))
length(biomass[,1])
cbind(rownames(biomass), match(rownames(biomass), rownames(cover)))
length(cover[,1])
cbind(rownames(cover), match(rownames(cover), rownames(biomass)))
for(i in 1:length(cover[,1]))
{
if(length(biomass[,1][rownames(biomass) %in% rownames(cover[i,])]) == 1)
{
cover[i,3] <- biomass[,1][rownames(biomass) %in% rownames(cover[i,])]
cover[i,4] <- biomass[,2][rownames(biomass) %in% rownames(cover[i,])]
} else
{
cover[i,3] <- NA
cover[i,4] <- NA
}
}
#Show table in decreasing order of species presence by biomass.
cover <- cover[order(cover[,3], decreasing = T),]
#Plot data
par(mai = c(2.5,1.2,1,1))
barplot(t(cbind(cover$bMean*10,cover$cMean)), main = "",
xaxt = "n", ylab = "% cover/Mg/ha * 10", xlab = "", axes = F, beside = T,
col = c("light green", "dark grey"))
axis(2)
text(matrix(c(seq(2,nrow(cover)*3,3), rep(-0.25,nrow(cover))), nrow = nrow(cover),
ncol = 2, byrow = F), srt = 60, adj = 1, xpd = T, labels = paste(rownames(cover)),
cex = 0.95)
legend(50,6, c("Biomass*10", "Cover"), fill = c("light green", "dark grey"), bty = "n")
#Create a function that will conduct a boundary layer regression with y variable as exponent,
#print summary of regression, and plot data
blr <- function(a,x,y,z)
{
cf <- 0.8
mv <- vector(mode = "numeric")
fv <- vector(mode = "numeric")
le <- vector(mode = "numeric")
fri <- 2:7
for(i in fri)
{
mv[i-1] <- max(y[x > i & x < i + 1])
fv[i-1] <- min(x[x > i & x < i + 1 & y == mv[i-1]])
le[i-1] <- length(y[x > i & x < i + 1])
mv[i-1] <- mv[i-1] + 0.0001
}
x2 <- fv
y2 <- mv
d <- data.frame(x2,y2)
logmodel <- lm(y2~a(x2),data=d)
### fake vector
xvec <- seq(0,8, length=101)
logpred <- predict(logmodel, newdata=data.frame(x2=xvec))
#Plot with boundary layer regression
plot(x, y, xlab = "Fire Rotation (years)", ylab = "biomass (Mg/ha)", main = z)
points(fv, mv, pch = 22)
lines(xvec,logpred)
text(4.1, (max(y) - max(y)/16), paste("Intercept", round(logmodel$coefficients[1],4)), cex = cf)
text(5.9, (max(y) - max(y)/16), paste("Slope", round(logmodel$coefficients[2],4)), cex = cf)
ms <- summary(logmodel)
text(4.1, (max(y) - max(y)/8), paste("r-squared", round(ms$r.squared,2)), cex = cf)
text(5.9, (max(y) - max(y)/8), paste("P-value", round(ms$coefficients[8],4)), cex = cf)
print(summary(logmodel))
}
dev.off()
set.panel(2,4)
cf <- 0.5
#1-2
#Forb
#Plot with sites
genus <- ab2mat$forb
Genus <- "Forb"
#Boundary layer regression
blr(log, emat$FireRotation, genus, Genus)
emat <- siteEnv3
#Environmental data
uv.outliers(emat, id ='Canopy:Duration', var = 'Soil_Pref', sd.limit = 2)
head(emat)
blr(log, emat$FineWD, genus, Genus)
genus
emat$FineWD
blr(log, emat$FineWD, genus, Genus)
length(genus)
length(emat$FineWD)
head(emat)
emat <- siteEnv3
#Boundary layer regression
blr(log, emat$FireRotation, genus, Genus)
#3-11
#Grass
#Plot with sites
genus <- ab2mat$grass + ab2mat$bluestem
Genus <- "Graminoid (ex. Aristida)"
#Boundary layer regression
blr(log, emat$FireRotation, genus, Genus)
#1-2
#Forb
#Plot with sites
genus <- ab2mat$dead.forb + ab2mat$live.forb
Genus <- "Forb"
plot(emat$FireRotation, genus, type = "n",
xlab = "Fire Rotation (years)", ylab = "Biomass (Mg/ha)")
text(emat$FireRotation, genus, labels = row.names(ab2mat), cex = cf)
All Palmetto
#Plot with sites
genus <- ab2mat$dead.palmetto + ab2mat$live.palmetto
Genus <- "Palmetto"
#Boundary layer regression
blr(log, emat$FireRotation, genus, Genus)
genus
ab2mat$forb
ab2mat$dead.forb
ab2mat
25
#Gallberry
#Plot with sites
genus <- ab2mat$gallberry
Genus <- "Gallberry"
#Linear regression
logmodel <- lm(genus ~ emat$FireRotation)
y <- genus
plot(emat$FireRotation, genus,
xlab = "Fire Rotation (years)", ylab = "Biomass (Mg/ha)", main = "Gallberry")
text(4.1, (max(y) - max(y)/16), paste("Intercept", round(logmodel$coefficients[1],4)), cex = cf)
text(5.9, (max(y) - max(y)/16), paste("Slope", round(logmodel$coefficients[2],4)), cex = cf)
ms <- summary(logmodel)
text(4.1, (max(y) - max(y)/8), paste("r-squared", round(ms$r.squared,2)), cex = cf)
text(5.9, (max(y) - max(y)/8), paste("P-value", round(ms$coefficients[8],4)), cex = cf)
abline(logmodel)
#25
#Gallberry
#Plot with sites
genus <- ab2mat$gallberry
Genus <- "Gallberry"
#Linear regression
logmodel <- lm(genus ~ emat$FireRotation)
y <- genus
plot(emat$FireRotation, genus,
xlab = "Fire Rotation (years)", ylab = "Biomass (Mg/ha)", main = "Gallberry")
text(4.1, (max(y) - max(y)/16), paste("Intercept", round(logmodel$coefficients[1],4)), cex = cf)
text(5.9, (max(y) - max(y)/16), paste("Slope", round(logmodel$coefficients[2],4)), cex = cf)
ms <- summary(logmodel)
text(4.1, (max(y) - max(y)/8), paste("r-squared", round(ms$r.squared,2)), cex = cf)
text(5.9, (max(y) - max(y)/8), paste("P-value", round(ms$coefficients[8],4)), cex = cf)
abline(logmodel)
29
#Mound Oak
#Plot with sites
genus <- ab2mat$oak.shrub
Genus <- "Shrub Oak"
#Boundary layer regression
blr(log, emat$FireRotation, genus, Genus)
#All Palmetto
#Plot with sites
genus <- ab2mat$dead.palmetto + ab2mat$live.palmetto
Genus <- "Palmetto"
plot(emat$FireRotation, genus, type = "n",
xlab = "Fire Rotation (years)", ylab = "Biomass (Mg/ha)")
text(emat$FireRotation, genus, labels = row.names(ab2mat), cex = cf)
23
#Carpet Oak
#Plot with sites
genus <- ab2mat$oak.groundcover
Genus <- "Grouncover Oak"
plot(emat$FireRotation, genus, type = "n",
xlab = "Fire Rotation (years)", ylab = "Biomass (Mg/ha)")
text(emat$FireRotation, genus, labels = row.names(ab2mat), cex = cf)
#Rough Fetterbush
#Plot with sites
genus <- ab2mat$rough.fetterbush
Genus <- "Rough Fetterbush"
#Boundary layer regression
blr(log, emat$FireRotation, genus, Genus)
19
#Darrow's blueberry
#Plot with sites
genus <- ab2mat$Darrows.blueberry
Genus <- "Darrow's blueberry"
#Boundary layer regression
blr(log, emat$FireRotation, genus, Genus)
#19
#Darrow's blueberry
#Plot with sites
genus <- ab2mat$Darrows.blueberry
Genus <- "Darrow's blueberry"
plot(emat$FireRotation, genus, type = "n",
xlab = "Fire Rotation (years)", ylab = "Biomass (Mg/ha)")
text(emat$FireRotation, genus, labels = row.names(ab2mat), cex = cf)
#Huckleberry
#Plot with sites
genus <- ab2mat$huckleberry
Genus <- "Huckleberry"
#Boundary layer regression
blr(exp, emat$FireRotation, genus, Genus)
#St. Andrew's Cross
#Plot with sites
genus <- ab2mat$St..Andrews.cross
Genus <- "St. Andrew's Cross"
#Boundary layer regression
blr(log, emat$FireRotation, genus, Genus)
#16
#Gopher Apple
#Plot with sites
genus <- ab2mat$gopher.apple
Genus <- "Gopher Apple"
#Boundary layer regression
blr(exp, emat$FireRotation, genus, Genus)
40
#American Holly
#Plot with sites
genus <- ab2mat$American.holly
Genus <- "American Holly"
#Boundary layer regression
blr(log, emat$FireRotation, genus, Genus)
#22
#Conradina
#Plot with sites
genus <- ab2mat$conradina
Genus <- "Conradina"
#Boundary layer regression
blr(log, emat$FireRotation, genus, Genus)
#22
#Conradina
#Plot with sites
genus <- ab2mat$conradina
Genus <- "Conradina"
#Boundary layer regression
blr(log, emat$FireRotation, genus, Genus)
#6
#Live Shrub
#Plot with sites
genus <- ab2mat$live.shrub
Genus <- "Live shrub"
#Boundary layer regression
blr(log, emat$FireRotation, genus, Genus)
#8
#Live Tree
#Plot with sites
genus <- ab2mat$live.tree
Genus <- "Live tree"
#Boundary layer regression
blr(log, emat$FireRotation, genus, Genus)
ab2mat
#4-5
#All Palmetto
#Plot with sites
genus <- ab2mat$palmetto
Genus <- "Palmetto"
#Boundary layer regression
blr(log, emat$FireRotation, genus, Genus)
genus <- ab2mat$oak.groundcover + ab2mat$oak.shrub + ab2mat$oak.tree
Genus <- "Grouncover Oak"
#Boundary layer regression
blr(log, emat$FireRotation, genus, Genus)
#Plot with sites
genus <- ab2mat$oak.shrub + ab2mat$oak.tree
Genus <- "Grouncover Oak"
#Boundary layer regression
blr(log, emat$FireRotation, genus, Genus)
#23
#Carpet Oak
#Plot with sites
genus <- ab2mat$oak.groundcover + ab2mat$oak.shrub + ab2mat$oak.tree
Genus <- "Grouncover Oak"
#Boundary layer regression
blr(log, emat$FireRotation, genus, Genus)
#23
#Carpet Oak
#Plot with sites
genus <- ab2mat$oak.groundcover + ab2mat$oak.shrub + ab2mat$oak.tree
Genus <- "Oak"
#Boundary layer regression
blr(log, emat$FireRotation, genus, Genus)
Sys.getenv("USERNAME")
username <- Sys.getenv("USERNAME")
#Create file path to Git repository
dir <- paste("C:/Users/", username, "/Documents/GitHub/Quality-Control---Overstory", sep = "")
dir
paste(dt, "_", tm, "_", username,
"_Overstory_Outliers.csv",
sep = "")
paste(dt, "_", tm, "_", username,
"_Overstory_Outliers.csv",
sep = "")
dt <- Sys.Date()
tm <- format(Sys.time(), format =paste(dt, "_", tm, "_", username,
#Date and time stamp on output file
dt <- Sys.Date()
tm <- format(Sys.time(), format = "%H.%M.%S",
tz = "", usetz = FALSE)
if(nrow(Overstory_Outliers) > 0) {write.csv(Overstory_Outliers, file = paste(dt, "_", tm, "_", username,
"_Overstory_Outliers.csv"))}
###    Setup workspace
#Identify user
username <- Sys.getenv("USERNAME")
#Create file path to Git repository
dir <- paste("C:/Users/", username, "/Documents/GitHub/Quality-Control---Overstory", sep = "")
#Set working directory
setwd(dir)
##  Load Packages
##  Load Data
trees = data.frame(read.csv("tbl_trees.csv"))
sample_units = data.frame(read.csv("tbl_unit.csv"))
sample_episodes = data.frame(read.csv("tbl_unitSamplingEpisode.csv"))
## Remove unnecessary data from sample_units object
## This will make file easier to view
sample_units <- sample_units[,-c(5:12, 14:17, 21:24)]
##  Add Unit Name
unitID <- merge(sample_episodes[,1:2], sample_units[,1:3], by = "unitID")
unitID <- unitID[,-3]
unitID <- unitID[,-1]
trees <- merge(trees , unitID , by = "unitSamplingEpisodeID")
###    Logical Boundaries
##  Heights
OutL1 <- trees[trees$htlc_ft > trees$ht_ft,]
OutL1 <- OutL1[!is.na(OutL1$treeID),]
OutL2 <- trees[trees$cbh_ft > trees$htlc_ft,]
OutL2 <- OutL2[!is.na(OutL2$treeID),]
##  Scorch/Char
OutL3 <- trees[trees$minBoleChar_ft > trees$maxBoleChar_ft,]
OutL3 <- OutL3[!is.na(OutL3$treeID),]
OutL4 <- trees[trees$maxBoleChar_ft > trees$ht_ft,]
OutL4 <- OutL4[!is.na(OutL4$treeID),]
OutL5 <- trees[trees$maxScorchHt_ft > trees$htlc_ft,]
OutL5 <- OutL5[!is.na(OutL5$treeID),]
##  StatusID
OutL6 <- trees[trees$statusID == 6,]
OutL6 <- OutL6[OutL6$htlc_ft > 0,]
OutL6 <- OutL6[!is.na(OutL6$htlc_ft),]
OutL7 <- trees[trees$statusID == 1,]
OutL7 <- OutL7[OutL7$htlc_ft == 0,]
OutL7 <- OutL7[!is.na(OutL7$htlc_ft),]
OutL8 <- trees[trees$statusID == 6,]
OutL8 <- OutL8[!is.na(OutL8$maxScorchHt_ft) | !is.na(OutL8$minBoleChar_ft) | !is.na(OutL8$maxBoleChar_ft) | !is.na(OutL8$burnSeverity) | !is.na(OutL8$crownScorch_. != 0),]
OutL8 <- OutL8[!is.na(OutL8$treeID),]
##  Burn Severity
OutL9 <- trees[trees$burnSeverity == 3,]
OutL9 <- OutL9[OutL9$crownScorch_. < 100,]
OutL9 <- OutL9[!is.na(OutL9$burnSeverity),]
OutL10 <- trees[trees$burnSeverity == 2,]
OutL10 <- OutL10[OutL10$crownScorch_. > 99 | OutL10$crownScorch_.  < 1,]
OutL10 <- OutL10[!is.na(OutL10$burnSeverity),]
OutL11 <- trees[trees$burnSeverity == 1,]
OutL11 <- OutL11[OutL11$crownScorch_. > 0,]
OutL11 <- OutL11[!is.na(OutL11$burnSeverity),]
##  Add Error Message and Output to OutLog
if(nrow(OutL1) > 0) {OutL1$Error <- "Logical Bound (Htlc > Ht)"; OutLog <- rbind(OutL1)}
if(nrow(OutL2) > 0) {OutL2$Error <- "Logical Bound (Cbh > Htlc)"; OutLog <- rbind(OutLog, OutL2)}
if(nrow(OutL3) > 0) {OutL3$Error <- "Logical Bound (MinChar > MaxChar)"; OutLog <- rbind(OutLog, OutL3)}
if(nrow(OutL4) > 0) {OutL4$Error <- "Logical Bound (MaxChar > Ht)"; OutLog <- rbind(OutLog, OutL4)}
if(nrow(OutL5) > 0) {OutL5$Error <- "Logical Bound (MaxScorch > Htlc)"; OutLog <- rbind(OutLog, OutL5)}
if(nrow(OutL6) > 0) {OutL6$Error <- "Logical Bound (Dead w/ Live Crown)"; OutLog <- rbind(OutLog, OutL6)}
if(nrow(OutL7) > 0) {OutL7$Error <- "Logical Bound (Live w/o Live Crown)"; OutLog <- rbind(OutLog, OutL7)}
if(nrow(OutL8) > 0) {OutL8$Error <- "Logical Bound (Dead Trees w/ improper data)"; OutLog <- rbind(OutLog, OutL8)}
if(nrow(OutL9) > 0) {OutL9$Error <- "Logical Bound (BrnSev 3 Crwn Srch < 100)"; OutLog <- rbind(OutLog, OutL9)}
if(nrow(OutL10) > 0) {OutL10$Error <- "Logical Bound (BrnSev 2 Crwn Srch 0 or 100)"; OutLog <- rbind(OutLog, OutL10)}
if(nrow(OutL11) > 0) {OutL11$Error <- "Logical Bound (BrnSev1 Crwn Srch > 0)"; OutLog <- rbind(OutLog, OutL11)}
###    Regression: Ht over DBH
mod1 <- lm(trees$ht_ft ~ trees$dbh_in)
summary(mod1) #R-squared: 0.8035; p < 0.001
##  Calculate residuals and output these potential outliers to OutR1
res1 <- rstandard(mod1)
OutR1 <-trees
OutR1 <- OutR1[abs(res1) > 3.5, ]
res2 <- res1[abs(res1) > 3.5]
##  Plots
#Height Vs. DBH
plot(trees$dbh_in, trees$ht_ft, xlab = "DBH (in)", ylab = "Height (ft)", main = "Height vs. DBH")
abline(mod1)
r2 = summary(mod1)$adj.r.squared
p = summary(mod1)$coefficients[2,4]
p = 0.2
rp = vector('expression', 2)
rp[1] = substitute(expression(italic(R)^2 == MYVALUE), list(MYVALUE = format(r2, dig = 3)))[2]
rp[2] = substitute(expression(italic(p) == MYOTHERVALUE), list(MYOTHERVALUE = format(p, digits = 3))) [2]
legend('bottomright', legend = rp, bty = 0)
#Outliers with Standardized Residuals > |3.5|
plot(trees$dbh_in, res1, xlab = "DBH (in)", ylab = "Standardized Residuals", main = "Outliers with Standardized Residuals > |3.5|")
abline(3.5, 0)
abline(-3.5, 0)
points(OutR1$dbh_in, res2, pch = 21, col = "red", bg = "red")
##  Add Error Message and Output to OutReg
if(nrow(OutR1) > 0) {OutR1$Error <- "Regression (StdRes > |3.5|)"; OutReg <- rbind(OutR1)}
###Compile and Export All Outliers to Overstory_Outliers.xls
if(nrow(OutLog) > 0) {Overstory_Outliers <- rbind(OutLog)}
if(nrow(OutReg) > 0) {Overstory_Outliers <- rbind(Overstory_Outliers, OutReg)}
#Date and time stamp on output file
dt <- Sys.Date()
tm <- format(Sys.time(), format = "%H.%M.%S",
tz = "", usetz = FALSE)
if(nrow(Overstory_Outliers) > 0) {write.csv(Overstory_Outliers, file = paste(dt, "_", tm, "_", username,
"_Overstory_Outliers.csv"))}
if(nrow(Overstory_Outliers) > 0) {write.csv(Overstory_Outliers, file = paste(dt, "_", tm, "_", username,
"_Overstory_Outliers.csv",
sep = ""))}
